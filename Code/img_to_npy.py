# -*- coding: utf-8 -*-
from PIL import Image
import PIL
import os
import numpy as np
from sklearn.utils import shuffle


benign_dir = 'G:/Complete_Dataset/Raw Apk Files/Sorted/FInal Full Evaluation/Codeitem/Benign Imgs'
malware_dir = 'G:/Complete_Dataset/Raw Apk Files/Sorted/FInal Full Evaluation/Codeitem/Malware Imgs'
#benign_dir = '/mnt/g/Complete_Dataset/By_Previous_Researcher/Preprecessed_Sample with Androguard(Images)/androguard_test/benign' #size = 299x299
#malware_dir = 'G:/Complete_Dataset/Raw Apk Files/Sorted/bk'


""" Loading every image from a directory and storing it into a numpy array """
benign_X = []
malware_X = []

print("Benign Img Loading Start")
for images in os.listdir(benign_dir):
    if not images.endswith(".txt"):
        img = Image.open(os.path.join(benign_dir,images))
        size_of_img = (150,150)
        img = img.resize(size_of_img,PIL.Image.ANTIALIAS)
        img = np.asarray(img)
        benign_X.append(img)
print("Done")

print("Malware Img Loading Start")
for images in os.listdir(malware_dir):
    if not images.endswith(".txt"):
        img = Image.open(os.path.join(malware_dir,images))
        size_of_img = (150,150)
        img = img.resize(size_of_img,PIL.Image.ANTIALIAS)
        img = np.asarray(img)
        malware_X.append(img)
print("Done")


benign_X = np.asarray(benign_X)
malware_X = np.asarray(malware_X)

del images,img



print("Combining")
""" Combining and then spliting the training from testing set """
X_combined = np.row_stack((malware_X,benign_X))
y_combined = np.concatenate(([1 for i in range(len(malware_X))],[0 for i in range(len(benign_X))]))
print("Total Train Samples: ",len(X_combined))
print("Done")


print("Splitting ")
from sklearn.model_selection import train_test_split
#a,b,c,d = train_test_split(X_combined,y_combined,test_size=0.05,stratify=y_combined)

X_train,X_test,y_train,y_test = train_test_split(X_combined,y_combined,test_size=0.05,stratify=y_combined)
#X_train,X_test,y_train,y_test = train_test_split(X_combined,y_combined,test_size=0.20,stratify=y_combined)
print("Done")

print("Saving")
np.savez_compressed( os.path.join("", "(" + str(len(X_combined)) + "x150x150)(Completed Images).npz"),
                    X_train= X_train,
                    y_train= y_train,
                    X_test = X_test,
                    y_test = y_test)
print("Finished")


###################################################

#import tensorflow as tf
#
#(X_train,y_train),(X_test,y_test) = tf.keras.datasets.mnist.load_data()
#
#print(X_train.shape)
#print(y_train.shape)
#print(X_test.shape)
#print(y_test.shape)
#
#temp_train = []
#temp_test = []
#for i in X_train:
#    temp_train.append(np.array(Image.fromarray(i).resize((150,150),Image.ANTIALIAS)))
#
#for i in X_test:
#    temp_test.append(np.array(Image.fromarray(i).resize((150,150),Image.ANTIALIAS)))
#
#X_train = np.array(temp_train)
#X_test = np.array(temp_test)
#print(X_train.shape)
#print(y_train.shape)
#print(X_test.shape)
#print(y_test.shape)
#
#X_train = X_train.reshape((60000,-1))
#X_test = X_test.reshape((10000,-1))
#y_train = y_train
#y_test = y_test
###################################################


##Method 2
#"""Data Importing"""
#print("Loading Data")
#data = np.load("C://Users/Changun/Desktop/spil's stuff/Projects/Android Malware Detection_CNN/Code/(20239x150x150)(Complete Dex File Images).npz")
##data = np.load("G://Complete_Dataset/Raw Apk Files/Sorted/(22234x150x150)(Completed Code Item Sceiont Images).npz")
#X_train= data['X_train']
#y_train= data['y_train']
#X_test = data['X_test']
#y_test = data['y_test']
#print(X_train.shape)
#print(y_train.shape)
#print(X_test.shape)
#print(y_test.shape)
#print("Done")
#
#print("Saving")
#np.savez_compressed("Complete Data Ready For Testing Dex File Data 150x150.npz",
#                   X_train= X_train,
#                   y_train= y_train,
#                   X_test = X_test,
#                   y_test = y_test)
#print("Finished")
#

"""
#path = os.getcwd()
#
#for labels in os.listdir(os.path.join(path,"../Dataset/data_x")):
##    print (labels)
#    for images in os.listdir(os.path.join(path,"../Dataset/data_x/" + labels)):
##        print ("Image Name: " + images )
#        if (labels == "benign") :
#            img = Image.open(os.path.join(path,"../Dataset/data_x/" + labels + '/' + images))
#            img = np.asarray(img)
#            benign_X.append(img)
#            del img
#        elif (labels == "malware") :
#            img = Image.open(os.path.join(path,"../Dataset/data_x/" + labels + '/' + images))
#            img = np.asarray(img)
#            malware_X.append(img)
#            del img
#        else:
#            pass



"""
